import   "324e499c0c3ad3fdbe0cb331196a76db:./dom.js";
import   "324e499c0c3ad3fdbe0cb331196a76db:./template.js";
/**
 * Our TrustedTypePolicy for HTML which is declared using the html template
 * tag function.
 *
 * That HTML is a developer-authored constant, and is parsed with innerHTML
 * before any untrusted expressions have been mixed in. Therefor it is
 * considered safe by construction.
 */ const $324e499c0c3ad3fdbe0cb331196a76db$var$policy = window.trustedTypes && trustedTypes.createPolicy('lit-html', {
    createHTML: (s)=>s
});
const $324e499c0c3ad3fdbe0cb331196a76db$var$commentMarker = ` ${$324e499c0c3ad3fdbe0cb331196a76db$import$c41f5f1517cd061$a33f808a19e65baa} `;
class $324e499c0c3ad3fdbe0cb331196a76db$export$568f177c2fc88632 {
    constructor(strings, values, type, processor){
        this.strings = strings;
        this.values = values;
        this.type = type;
        this.processor = processor;
    }
    /**
     * Returns a string of HTML used to create a `<template>` element.
     */ getHTML() {
        const l = this.strings.length - 1;
        let html = '';
        let isCommentBinding = false;
        for(let i = 0; i < l; i++){
            const s = this.strings[i];
            // For each binding we want to determine the kind of marker to insert
            // into the template source before it's parsed by the browser's HTML
            // parser. The marker type is based on whether the expression is in an
            // attribute, text, or comment position.
            //   * For node-position bindings we insert a comment with the marker
            //     sentinel as its text content, like <!--{{lit-guid}}-->.
            //   * For attribute bindings we insert just the marker sentinel for the
            //     first binding, so that we support unquoted attribute bindings.
            //     Subsequent bindings can use a comment marker because multi-binding
            //     attributes must be quoted.
            //   * For comment bindings we insert just the marker sentinel so we don't
            //     close the comment.
            //
            // The following code scans the template source, but is *not* an HTML
            // parser. We don't need to track the tree structure of the HTML, only
            // whether a binding is inside a comment, and if not, if it appears to be
            // the first binding in an attribute.
            const commentOpen = s.lastIndexOf('<!--');
            // We're in comment position if we have a comment open with no following
            // comment close. Because <-- can appear in an attribute value there can
            // be false positives.
            isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf('-->', commentOpen + 1) === -1;
            // Check to see if we have an attribute-like sequence preceding the
            // expression. This can match "name=value" like structures in text,
            // comments, and attribute values, so there can be false-positives.
            const attributeMatch = $324e499c0c3ad3fdbe0cb331196a76db$import$c41f5f1517cd061$f805fe132fa0c7e7.exec(s);
            if (attributeMatch === null) // We're only in this branch if we don't have a attribute-like
            // preceding sequence. For comments, this guards against unusual
            // attribute values like <div foo="<!--${'bar'}">. Cases like
            // <!-- foo=${'bar'}--> are handled correctly in the attribute branch
            // below.
            html += s + (isCommentBinding ? $324e499c0c3ad3fdbe0cb331196a76db$var$commentMarker : $324e499c0c3ad3fdbe0cb331196a76db$import$c41f5f1517cd061$b58bf00d18b2c2eb);
            else // For attributes we use just a marker sentinel, and also append a
            // $lit$ suffix to the name to opt-out of attribute-specific parsing
            // that IE and Edge do for style and certain SVG attributes.
            html += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + $324e499c0c3ad3fdbe0cb331196a76db$import$c41f5f1517cd061$572df4455c5c0c8e + attributeMatch[3] + $324e499c0c3ad3fdbe0cb331196a76db$import$c41f5f1517cd061$a33f808a19e65baa;
        }
        html += this.strings[l];
        return html;
    }
    getTemplateElement() {
        const template = document.createElement('template');
        let value = this.getHTML();
        if ($324e499c0c3ad3fdbe0cb331196a76db$var$policy !== undefined) // this is secure because `this.strings` is a TemplateStringsArray.
        // TODO: validate this when
        // https://github.com/tc39/proposal-array-is-template-object is
        // implemented.
        value = $324e499c0c3ad3fdbe0cb331196a76db$var$policy.createHTML(value);
        template.innerHTML = value;
        return template;
    }
}
class $324e499c0c3ad3fdbe0cb331196a76db$export$6b0569d4baab4818 extends $324e499c0c3ad3fdbe0cb331196a76db$export$568f177c2fc88632 {
    getHTML() {
        return `<svg>${super.getHTML()}</svg>`;
    }
    getTemplateElement() {
        const template = super.getTemplateElement();
        const content = template.content;
        const svgElement = content.firstChild;
        content.removeChild(svgElement);
        $324e499c0c3ad3fdbe0cb331196a76db$import$aaff0e6c17f2d126$f08159c338e37fca(content, svgElement.firstChild);
        return template;
    }
}
