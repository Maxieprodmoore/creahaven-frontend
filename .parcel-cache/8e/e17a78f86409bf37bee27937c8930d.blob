const $ebac493ecad101ff3b34b31b6b3cb092$export$a33f808a19e65baa = `{{lit-${String(Math.random()).slice(2)}}}`;
const $ebac493ecad101ff3b34b31b6b3cb092$export$b58bf00d18b2c2eb = `<!--${$ebac493ecad101ff3b34b31b6b3cb092$export$a33f808a19e65baa}-->`;
const $ebac493ecad101ff3b34b31b6b3cb092$export$74b29494b472a0c4 = new RegExp(`${$ebac493ecad101ff3b34b31b6b3cb092$export$a33f808a19e65baa}|${$ebac493ecad101ff3b34b31b6b3cb092$export$b58bf00d18b2c2eb}`);
const $ebac493ecad101ff3b34b31b6b3cb092$export$572df4455c5c0c8e = '$lit$';
class $ebac493ecad101ff3b34b31b6b3cb092$export$93af88fe68eea917 {
    constructor(result, element){
        this.parts = [];
        this.element = element;
        const nodesToRemove = [];
        const stack = [];
        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null
        const walker = document.createTreeWalker(element.content, 133/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */ , null, false);
        // Keeps track of the last index associated with a part. We try to delete
        // unnecessary nodes, but we never want to associate two different parts
        // to the same index. They must have a constant node between.
        let lastPartIndex = 0;
        let index = -1;
        let partIndex = 0;
        const { strings: strings , values: { length: length  }  } = result;
        while(partIndex < length){
            const node = walker.nextNode();
            if (node === null) {
                // We've exhausted the content inside a nested template element.
                // Because we still have parts (the outer for-loop), we know:
                // - There is a template in the stack
                // - The walker will find a nextNode outside the template
                walker.currentNode = stack.pop();
                continue;
            }
            index++;
            if (node.nodeType === 1) {
                if (node.hasAttributes()) {
                    const attributes = node.attributes;
                    const { length: length1  } = attributes;
                    // Per
                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                    // attributes are not guaranteed to be returned in document order.
                    // In particular, Edge/IE can return them out of order, so we cannot
                    // assume a correspondence between part index and attribute index.
                    let count = 0;
                    for(let i = 0; i < length1; i++)if ($ebac493ecad101ff3b34b31b6b3cb092$var$endsWith(attributes[i].name, $ebac493ecad101ff3b34b31b6b3cb092$export$572df4455c5c0c8e)) count++;
                    while((count--) > 0){
                        // Get the template literal section leading up to the first
                        // expression in this attribute
                        const stringForPart = strings[partIndex];
                        // Find the attribute name
                        const name = $ebac493ecad101ff3b34b31b6b3cb092$export$f805fe132fa0c7e7.exec(stringForPart)[2];
                        // Find the corresponding attribute
                        // All bound attributes have had a suffix added in
                        // TemplateResult#getHTML to opt out of special attribute
                        // handling. To look up the attribute value we also need to add
                        // the suffix.
                        const attributeLookupName = name.toLowerCase() + $ebac493ecad101ff3b34b31b6b3cb092$export$572df4455c5c0c8e;
                        const attributeValue = node.getAttribute(attributeLookupName);
                        node.removeAttribute(attributeLookupName);
                        const statics = attributeValue.split($ebac493ecad101ff3b34b31b6b3cb092$export$74b29494b472a0c4);
                        this.parts.push({
                            type: 'attribute',
                            index: index,
                            name: name,
                            strings: statics
                        });
                        partIndex += statics.length - 1;
                    }
                }
                if (node.tagName === 'TEMPLATE') {
                    stack.push(node);
                    walker.currentNode = node.content;
                }
            } else if (node.nodeType === 3) {
                const data = node.data;
                if (data.indexOf($ebac493ecad101ff3b34b31b6b3cb092$export$a33f808a19e65baa) >= 0) {
                    const parent = node.parentNode;
                    const strings1 = data.split($ebac493ecad101ff3b34b31b6b3cb092$export$74b29494b472a0c4);
                    const lastIndex = strings1.length - 1;
                    // Generate a new text node for each literal section
                    // These nodes are also used as the markers for node parts
                    for(let i = 0; i < lastIndex; i++){
                        let insert;
                        let s = strings1[i];
                        if (s === '') insert = $ebac493ecad101ff3b34b31b6b3cb092$export$bdc87615ada36d10();
                        else {
                            const match = $ebac493ecad101ff3b34b31b6b3cb092$export$f805fe132fa0c7e7.exec(s);
                            if (match !== null && $ebac493ecad101ff3b34b31b6b3cb092$var$endsWith(match[2], $ebac493ecad101ff3b34b31b6b3cb092$export$572df4455c5c0c8e)) s = s.slice(0, match.index) + match[1] + match[2].slice(0, -$ebac493ecad101ff3b34b31b6b3cb092$export$572df4455c5c0c8e.length) + match[3];
                            insert = document.createTextNode(s);
                        }
                        parent.insertBefore(insert, node);
                        this.parts.push({
                            type: 'node',
                            index: ++index
                        });
                    }
                    // If there's no text, we must insert a comment to mark our place.
                    // Else, we can trust it will stick around after cloning.
                    if (strings1[lastIndex] === '') {
                        parent.insertBefore($ebac493ecad101ff3b34b31b6b3cb092$export$bdc87615ada36d10(), node);
                        nodesToRemove.push(node);
                    } else node.data = strings1[lastIndex];
                    // We have a part for each match found
                    partIndex += lastIndex;
                }
            } else if (node.nodeType === 8) {
                if (node.data === $ebac493ecad101ff3b34b31b6b3cb092$export$a33f808a19e65baa) {
                    const parent = node.parentNode;
                    // Add a new marker node to be the startNode of the Part if any of
                    // the following are true:
                    //  * We don't have a previousSibling
                    //  * The previousSibling is already the start of a previous part
                    if (node.previousSibling === null || index === lastPartIndex) {
                        index++;
                        parent.insertBefore($ebac493ecad101ff3b34b31b6b3cb092$export$bdc87615ada36d10(), node);
                    }
                    lastPartIndex = index;
                    this.parts.push({
                        type: 'node',
                        index: index
                    });
                    // If we don't have a nextSibling, keep this node so we have an end.
                    // Else, we can remove it to save future costs.
                    if (node.nextSibling === null) node.data = '';
                    else {
                        nodesToRemove.push(node);
                        index--;
                    }
                    partIndex++;
                } else {
                    let i = -1;
                    while((i = node.data.indexOf($ebac493ecad101ff3b34b31b6b3cb092$export$a33f808a19e65baa, i + 1)) !== -1){
                        // Comment node has a binding marker inside, make an inactive part
                        // The binding won't work, but subsequent bindings will
                        // TODO (justinfagnani): consider whether it's even worth it to
                        // make bindings in comments work
                        this.parts.push({
                            type: 'node',
                            index: -1
                        });
                        partIndex++;
                    }
                }
            }
        }
        // Remove text binding nodes after the walk to not disturb the TreeWalker
        for (const n of nodesToRemove)n.parentNode.removeChild(n);
    }
}
const $ebac493ecad101ff3b34b31b6b3cb092$var$endsWith = (str, suffix)=>{
    const index1 = str.length - suffix.length;
    return index1 >= 0 && str.slice(index1) === suffix;
};
const $ebac493ecad101ff3b34b31b6b3cb092$export$6926ca917b0c720d = (part)=>part.index !== -1
;
const $ebac493ecad101ff3b34b31b6b3cb092$export$bdc87615ada36d10 = ()=>document.createComment('')
;
const $ebac493ecad101ff3b34b31b6b3cb092$export$f805fe132fa0c7e7 = // eslint-disable-next-line no-control-regex
/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
