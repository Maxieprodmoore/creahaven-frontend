var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _app = require("../../App");
var _appDefault = parcelHelpers.interopDefault(_app);
var _litHtml = require("lit-html");
var _router = require("../../Router");
var _auth = require("../../Auth");
var _authDefault = parcelHelpers.interopDefault(_auth);
var _utils = require("../../Utils");
var _utilsDefault = parcelHelpers.interopDefault(_utils);
var _userAPI = require("./../../UserAPI");
var _userAPIDefault = parcelHelpers.interopDefault(_userAPI);
var _toast = require("../../Toast");
var _toastDefault = parcelHelpers.interopDefault(_toast);
class CreativesView {
    init() {
        document.title = 'Creatives';
        this.creatives = null;
        this.render();
        _utilsDefault.default.pageIntroAnim();
        this.getCreatives();
    }
    async filterCollabIs(field, match) {
        //validate
        if (!field || !match) return;
        //get fresh copy of projects page
        this.collaborationIs = await CollaborationAPI.getCollaborationIs();
        let filteredCollaborationIs;
        // tag
        if (field == 'tag') filteredCollaborationIs = this.collaborationIs.filter((collaboration)=>collaboration.tag == match
        );
        //render
        this.collaborationIs = filteredCollaborationIs;
        this.render();
    }
    clearFilterBtns() {
        //clear all checked buttons (attribute = 'checked')
        const filterButtons = document.querySelectorAll('.filter-btn');
        filterButtons.forEach((btn)=>btn.removeAttribute("checked")
        );
    }
    handleFilterBtn(e) {
        this.clearFilterBtns();
        //set item = active (item add attribute 'checked')
        e.target.setAttribute("checked", "");
        //extract the field and match from buttons
        const field = e.target.getAttribute("data-field");
        const match = e.target.getAttribute("data-match");
        console.log("field = ", field);
        console.log("match = ", match);
        //filter collaboration invites
        this.filterCollabIs(field, match);
    }
    clearFilters() {
        this.getCollaborationIs();
        this.clearFilterBtns();
    }
    async getCreatives() {
        try {
            this.creatives = await _userAPIDefault.default.getCreatives();
            console.log(this.creatives);
            this.render();
        } catch (err) {
            _toastDefault.default.show(err, 'error');
        }
    }
    render() {
        const template = _litHtml.html`\n      <va-app-header title="Creatives" user="${JSON.stringify(_authDefault.default.currentUser)}"></va-app-header>\n      <div class="page-body">\n        <div class="page-content calign">        \n          <h1 class="anim-in">Creatives</h1>\n          <div class="filter-menu">\n            <div>Filter by:</div>\n              <div class="filter-search"><strong>Name</strong><sl-textarea placeholder = "Search bar" resize="none" rows="1"></sl-textarea></div>\n              <div>\n                <sl-button size="small" @click=${this.clearFilters.bind(this)}>Clear Filters</sl-button>\n              </div>\n          </div>\n\n          <div id="creative-grid">\n            ${this.creatives == null ? _litHtml.html`\n              <sl-spinner></sl-spinner>\n            ` : _litHtml.html`\n              ${this.creatives.map((creative)=>_litHtml.html`\n              <va-creative class="creative-card"\n                id="${creative._id}"\n                name="${creative.displayName}"\n                email="${creative.email}"\n                image="${creative.avatar}"\n                bio="${creative.bio}"\n                website="${creative.website}"\n                facebook="${creative.facebook}"\n                instagram="${creative.instagram}"\n                twitter="${creative.twitter}"\n                youtube="${creative.youtube}"\n\n              >\n              </va-creative>\n                \n              `
        )}\n            `}\n          </div>\n          \n        </div>\n      </div>\n            \n    `;
        _litHtml.render(template, _appDefault.default.rootEl);
    }
}
exports.default = new CreativesView();
