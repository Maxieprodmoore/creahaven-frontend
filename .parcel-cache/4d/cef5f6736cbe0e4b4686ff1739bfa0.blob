import   "04f50a5efda894092cd2198ba5d279ff:./directive.js";
import   "04f50a5efda894092cd2198ba5d279ff:./dom.js";
import   "04f50a5efda894092cd2198ba5d279ff:./part.js";
import   "04f50a5efda894092cd2198ba5d279ff:./template-instance.js";
import   "04f50a5efda894092cd2198ba5d279ff:./template-result.js";
import   "04f50a5efda894092cd2198ba5d279ff:./template.js";
const $04f50a5efda894092cd2198ba5d279ff$export$facafb4c1a58ef45 = (value)=>{
    return value === null || !(typeof value === 'object' || typeof value === 'function');
};
const $04f50a5efda894092cd2198ba5d279ff$export$15a1db90e2d50ab8 = (value)=>{
    return Array.isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    !!(value && value[Symbol.iterator]);
};
class $04f50a5efda894092cd2198ba5d279ff$export$ff5d2ab550394226 {
    constructor(element, name, strings){
        this.dirty = true;
        this.element = element;
        this.name = name;
        this.strings = strings;
        this.parts = [];
        for(let i = 0; i < strings.length - 1; i++)this.parts[i] = this._createPart();
    }
    /**
     * Creates a single part. Override this to create a differnt type of part.
     */ _createPart() {
        return new $04f50a5efda894092cd2198ba5d279ff$export$9b035ce2835c03f(this);
    }
    _getValue() {
        const strings1 = this.strings;
        const l = strings1.length - 1;
        const parts = this.parts;
        // If we're assigning an attribute via syntax like:
        //    attr="${foo}"  or  attr=${foo}
        // but not
        //    attr="${foo} ${bar}" or attr="${foo} baz"
        // then we don't want to coerce the attribute value into one long
        // string. Instead we want to just return the value itself directly,
        // so that sanitizeDOMValue can get the actual value rather than
        // String(value)
        // The exception is if v is an array, in which case we do want to smash
        // it together into a string without calling String() on the array.
        //
        // This also allows trusted values (when using TrustedTypes) being
        // assigned to DOM sinks without being stringified in the process.
        if (l === 1 && strings1[0] === '' && strings1[1] === '') {
            const v = parts[0].value;
            if (typeof v === 'symbol') return String(v);
            if (typeof v === 'string' || !$04f50a5efda894092cd2198ba5d279ff$export$15a1db90e2d50ab8(v)) return v;
        }
        let text = '';
        for(let i1 = 0; i1 < l; i1++){
            text += strings1[i1];
            const part = parts[i1];
            if (part !== undefined) {
                const v = part.value;
                if ($04f50a5efda894092cd2198ba5d279ff$export$facafb4c1a58ef45(v) || !$04f50a5efda894092cd2198ba5d279ff$export$15a1db90e2d50ab8(v)) text += typeof v === 'string' ? v : String(v);
                else for (const t of v)text += typeof t === 'string' ? t : String(t);
            }
        }
        text += strings1[l];
        return text;
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            this.element.setAttribute(this.name, this._getValue());
        }
    }
}
class $04f50a5efda894092cd2198ba5d279ff$export$9b035ce2835c03f {
    constructor(committer){
        this.value = undefined;
        this.committer = committer;
    }
    setValue(value) {
        if (value !== $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534 && (!$04f50a5efda894092cd2198ba5d279ff$export$facafb4c1a58ef45(value) || value !== this.value)) {
            this.value = value;
            // If the value is a not a directive, dirty the committer so that it'll
            // call setAttribute. If the value is a directive, it'll dirty the
            // committer if it calls setValue().
            if (!$04f50a5efda894092cd2198ba5d279ff$import$8ad69e86f3fe51c2$30df666d97da3276(value)) this.committer.dirty = true;
        }
    }
    commit() {
        while($04f50a5efda894092cd2198ba5d279ff$import$8ad69e86f3fe51c2$30df666d97da3276(this.value)){
            const directive = this.value;
            this.value = $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534;
            directive(this);
        }
        if (this.value === $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534) return;
        this.committer.commit();
    }
}
class $04f50a5efda894092cd2198ba5d279ff$export$edfafdd4de02b76 {
    constructor(options){
        this.value = undefined;
        this.__pendingValue = undefined;
        this.options = options;
    }
    /**
     * Appends this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */ appendInto(container) {
        this.startNode = container.appendChild($04f50a5efda894092cd2198ba5d279ff$import$c41f5f1517cd061$bdc87615ada36d10());
        this.endNode = container.appendChild($04f50a5efda894092cd2198ba5d279ff$import$c41f5f1517cd061$bdc87615ada36d10());
    }
    /**
     * Inserts this part after the `ref` node (between `ref` and `ref`'s next
     * sibling). Both `ref` and its next sibling must be static, unchanging nodes
     * such as those that appear in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */ insertAfterNode(ref) {
        this.startNode = ref;
        this.endNode = ref.nextSibling;
    }
    /**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */ appendIntoPart(part) {
        part.__insert(this.startNode = $04f50a5efda894092cd2198ba5d279ff$import$c41f5f1517cd061$bdc87615ada36d10());
        part.__insert(this.endNode = $04f50a5efda894092cd2198ba5d279ff$import$c41f5f1517cd061$bdc87615ada36d10());
    }
    /**
     * Inserts this part after the `ref` part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */ insertAfterPart(ref) {
        ref.__insert(this.startNode = $04f50a5efda894092cd2198ba5d279ff$import$c41f5f1517cd061$bdc87615ada36d10());
        this.endNode = ref.endNode;
        ref.endNode = this.startNode;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        if (this.startNode.parentNode === null) return;
        while($04f50a5efda894092cd2198ba5d279ff$import$8ad69e86f3fe51c2$30df666d97da3276(this.__pendingValue)){
            const directive = this.__pendingValue;
            this.__pendingValue = $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534;
            directive(this);
        }
        const value = this.__pendingValue;
        if (value === $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534) return;
        if ($04f50a5efda894092cd2198ba5d279ff$export$facafb4c1a58ef45(value)) {
            if (value !== this.value) this.__commitText(value);
        } else if (value instanceof $04f50a5efda894092cd2198ba5d279ff$import$4fc6395127cee33b$568f177c2fc88632) this.__commitTemplateResult(value);
        else if (value instanceof Node) this.__commitNode(value);
        else if ($04f50a5efda894092cd2198ba5d279ff$export$15a1db90e2d50ab8(value)) this.__commitIterable(value);
        else if (value === $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$9f457b66e101538f) {
            this.value = $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$9f457b66e101538f;
            this.clear();
        } else // Fallback, will render the string representation
        this.__commitText(value);
    }
    __insert(node) {
        this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
        if (this.value === value) return;
        this.clear();
        this.__insert(value);
        this.value = value;
    }
    __commitText(value) {
        const node = this.startNode.nextSibling;
        value = value == null ? '' : value;
        // If `value` isn't already a string, we explicitly convert it here in case
        // it can't be implicitly converted - i.e. it's a symbol.
        const valueAsString = typeof value === 'string' ? value : String(value);
        if (node === this.endNode.previousSibling && node.nodeType === 3) // If we only have a single text node between the markers, we can just
        // set its value, rather than replacing it.
        // TODO(justinfagnani): Can we just check if this.value is primitive?
        node.data = valueAsString;
        else this.__commitNode(document.createTextNode(valueAsString));
        this.value = value;
    }
    __commitTemplateResult(value) {
        const template = this.options.templateFactory(value);
        if (this.value instanceof $04f50a5efda894092cd2198ba5d279ff$import$131cb3110d6ff703$af8d7ebf78b1ba4c && this.value.template === template) this.value.update(value.values);
        else {
            // Make sure we propagate the template processor from the TemplateResult
            // so that we use its syntax extension, etc. The template factory comes
            // from the render function options so that it can control template
            // caching and preprocessing.
            const instance = new $04f50a5efda894092cd2198ba5d279ff$import$131cb3110d6ff703$af8d7ebf78b1ba4c(template, value.processor, this.options);
            const fragment = instance._clone();
            instance.update(value.values);
            this.__commitNode(fragment);
            this.value = instance;
        }
    }
    __commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If _value is an array, then the previous render was of an
        // iterable and _value will contain the NodeParts from the previous
        // render. If _value is not an array, clear this part and make a new
        // array for NodeParts.
        if (!Array.isArray(this.value)) {
            this.value = [];
            this.clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this.value;
        let partIndex = 0;
        let itemPart;
        for (const item of value){
            // Try to reuse an existing part
            itemPart = itemParts[partIndex];
            // If no existing part, create a new one
            if (itemPart === undefined) {
                itemPart = new $04f50a5efda894092cd2198ba5d279ff$export$edfafdd4de02b76(this.options);
                itemParts.push(itemPart);
                if (partIndex === 0) itemPart.appendIntoPart(this);
                else itemPart.insertAfterPart(itemParts[partIndex - 1]);
            }
            itemPart.setValue(item);
            itemPart.commit();
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
            this.clear(itemPart && itemPart.endNode);
        }
    }
    clear(startNode = this.startNode) {
        $04f50a5efda894092cd2198ba5d279ff$import$aaff0e6c17f2d126$87ad59dd8be5dd12(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
}
class $04f50a5efda894092cd2198ba5d279ff$export$2570c24193e71ea2 {
    constructor(element1, name1, strings1){
        this.value = undefined;
        this.__pendingValue = undefined;
        if (strings1.length !== 2 || strings1[0] !== '' || strings1[1] !== '') throw new Error('Boolean attributes can only contain a single expression');
        this.element = element1;
        this.name = name1;
        this.strings = strings1;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while($04f50a5efda894092cd2198ba5d279ff$import$8ad69e86f3fe51c2$30df666d97da3276(this.__pendingValue)){
            const directive = this.__pendingValue;
            this.__pendingValue = $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534;
            directive(this);
        }
        if (this.__pendingValue === $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534) return;
        const value = !!this.__pendingValue;
        if (this.value !== value) {
            if (value) this.element.setAttribute(this.name, '');
            else this.element.removeAttribute(this.name);
            this.value = value;
        }
        this.__pendingValue = $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534;
    }
}
class $04f50a5efda894092cd2198ba5d279ff$export$d66695aeabf5bf46 extends $04f50a5efda894092cd2198ba5d279ff$export$ff5d2ab550394226 {
    constructor(element2, name2, strings2){
        super(element2, name2, strings2);
        this.single = strings2.length === 2 && strings2[0] === '' && strings2[1] === '';
    }
    _createPart() {
        return new $04f50a5efda894092cd2198ba5d279ff$export$6adb710d9cbc1462(this);
    }
    _getValue() {
        if (this.single) return this.parts[0].value;
        return super._getValue();
    }
    commit() {
        if (this.dirty) {
            this.dirty = false;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.element[this.name] = this._getValue();
        }
    }
}
class $04f50a5efda894092cd2198ba5d279ff$export$6adb710d9cbc1462 extends $04f50a5efda894092cd2198ba5d279ff$export$9b035ce2835c03f {
}
// Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the third
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.
let $04f50a5efda894092cd2198ba5d279ff$var$eventOptionsSupported = false;
// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
// blocks right into the body of a module
(()=>{
    try {
        const options1 = {
            get capture () {
                $04f50a5efda894092cd2198ba5d279ff$var$eventOptionsSupported = true;
                return false;
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window.addEventListener('test', options1, options1);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        window.removeEventListener('test', options1, options1);
    } catch (_e) {
    // event options not supported
    }
})();
class $04f50a5efda894092cd2198ba5d279ff$export$ce9926cbad3facec {
    constructor(element3, eventName, eventContext){
        this.value = undefined;
        this.__pendingValue = undefined;
        this.element = element3;
        this.eventName = eventName;
        this.eventContext = eventContext;
        this.__boundHandleEvent = (e)=>this.handleEvent(e)
        ;
    }
    setValue(value) {
        this.__pendingValue = value;
    }
    commit() {
        while($04f50a5efda894092cd2198ba5d279ff$import$8ad69e86f3fe51c2$30df666d97da3276(this.__pendingValue)){
            const directive = this.__pendingValue;
            this.__pendingValue = $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534;
            directive(this);
        }
        if (this.__pendingValue === $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534) return;
        const newListener = this.__pendingValue;
        const oldListener = this.value;
        const shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
        if (shouldRemoveListener) this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        if (shouldAddListener) {
            this.__options = $04f50a5efda894092cd2198ba5d279ff$var$getOptions(newListener);
            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
        }
        this.value = newListener;
        this.__pendingValue = $04f50a5efda894092cd2198ba5d279ff$import$97edcb5a7e7798d0$1b4c200bb93d5534;
    }
    handleEvent(event) {
        if (typeof this.value === 'function') this.value.call(this.eventContext || this.element, event);
        else this.value.handleEvent(event);
    }
}
// We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.
const $04f50a5efda894092cd2198ba5d279ff$var$getOptions = (o)=>o && ($04f50a5efda894092cd2198ba5d279ff$var$eventOptionsSupported ? {
        capture: o.capture,
        passive: o.passive,
        once: o.once
    } : o.capture)
;
