import   "e15bf833f41fdbd47bc5145e4c0f5a2e:./dom.js";
import   "e15bf833f41fdbd47bc5145e4c0f5a2e:./modify-template.js";
import   "e15bf833f41fdbd47bc5145e4c0f5a2e:./render.js";
import   "e15bf833f41fdbd47bc5145e4c0f5a2e:./template-factory.js";
import   "e15bf833f41fdbd47bc5145e4c0f5a2e:./template-instance.js";
import   "e15bf833f41fdbd47bc5145e4c0f5a2e:./template.js";
import   "e15bf833f41fdbd47bc5145e4c0f5a2e:../lit-html.js";
// Get a key to lookup in `templateCaches`.
const $e15bf833f41fdbd47bc5145e4c0f5a2e$var$getTemplateCacheKey = (type, scopeName)=>`${type}--${scopeName}`
;
let $e15bf833f41fdbd47bc5145e4c0f5a2e$var$compatibleShadyCSSVersion = true;
if (typeof window.ShadyCSS === 'undefined') $e15bf833f41fdbd47bc5145e4c0f5a2e$var$compatibleShadyCSSVersion = false;
else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
    console.warn(`Incompatible ShadyCSS version detected. ` + `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` + `@webcomponents/shadycss@1.3.1.`);
    $e15bf833f41fdbd47bc5145e4c0f5a2e$var$compatibleShadyCSSVersion = false;
}
const $e15bf833f41fdbd47bc5145e4c0f5a2e$export$cf848885ac57356f = (scopeName)=>(result)=>{
        const cacheKey = $e15bf833f41fdbd47bc5145e4c0f5a2e$var$getTemplateCacheKey(result.type, scopeName);
        let templateCache = $e15bf833f41fdbd47bc5145e4c0f5a2e$import$f8303525ca1f3ae5$f7de09ff312bc1e0.get(cacheKey);
        if (templateCache === undefined) {
            templateCache = {
                stringsArray: new WeakMap(),
                keyString: new Map()
            };
            $e15bf833f41fdbd47bc5145e4c0f5a2e$import$f8303525ca1f3ae5$f7de09ff312bc1e0.set(cacheKey, templateCache);
        }
        let template = templateCache.stringsArray.get(result.strings);
        if (template !== undefined) return template;
        const key = result.strings.join($e15bf833f41fdbd47bc5145e4c0f5a2e$import$c41f5f1517cd061$a33f808a19e65baa);
        template = templateCache.keyString.get(key);
        if (template === undefined) {
            const element = result.getTemplateElement();
            if ($e15bf833f41fdbd47bc5145e4c0f5a2e$var$compatibleShadyCSSVersion) window.ShadyCSS.prepareTemplateDom(element, scopeName);
            template = new $e15bf833f41fdbd47bc5145e4c0f5a2e$import$c41f5f1517cd061$93af88fe68eea917(result, element);
            templateCache.keyString.set(key, template);
        }
        templateCache.stringsArray.set(result.strings, template);
        return template;
    }
;
const $e15bf833f41fdbd47bc5145e4c0f5a2e$var$TEMPLATE_TYPES = [
    'html',
    'svg'
];
/**
 * Removes all style elements from Templates for the given scopeName.
 */ const $e15bf833f41fdbd47bc5145e4c0f5a2e$var$removeStylesFromLitTemplates = (scopeName)=>{
    $e15bf833f41fdbd47bc5145e4c0f5a2e$var$TEMPLATE_TYPES.forEach((type)=>{
        const templates = $e15bf833f41fdbd47bc5145e4c0f5a2e$import$f8303525ca1f3ae5$f7de09ff312bc1e0.get($e15bf833f41fdbd47bc5145e4c0f5a2e$var$getTemplateCacheKey(type, scopeName));
        if (templates !== undefined) templates.keyString.forEach((template)=>{
            const { element: { content: content  }  } = template;
            // IE 11 doesn't support the iterable param Set constructor
            const styles = new Set();
            Array.from(content.querySelectorAll('style')).forEach((s)=>{
                styles.add(s);
            });
            $e15bf833f41fdbd47bc5145e4c0f5a2e$import$8be20fd875ffd458$eaae5a7f23c7face(template, styles);
        });
    });
};
const $e15bf833f41fdbd47bc5145e4c0f5a2e$var$shadyRenderSet = new Set();
/**
 * For the given scope name, ensures that ShadyCSS style scoping is performed.
 * This is done just once per scope name so the fragment and template cannot
 * be modified.
 * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
 * to be scoped and appended to the document
 * (2) removes style elements from all lit-html Templates for this scope name.
 *
 * Note, <style> elements can only be placed into templates for the
 * initial rendering of the scope. If <style> elements are included in templates
 * dynamically rendered to the scope (after the first scope render), they will
 * not be scoped and the <style> will be left in the template and rendered
 * output.
 */ const $e15bf833f41fdbd47bc5145e4c0f5a2e$var$prepareTemplateStyles = (scopeName, renderedDOM, template)=>{
    $e15bf833f41fdbd47bc5145e4c0f5a2e$var$shadyRenderSet.add(scopeName);
    // If `renderedDOM` is stamped from a Template, then we need to edit that
    // Template's underlying template element. Otherwise, we create one here
    // to give to ShadyCSS, which still requires one while scoping.
    const templateElement = !!template ? template.element : document.createElement('template');
    // Move styles out of rendered DOM and store.
    const styles = renderedDOM.querySelectorAll('style');
    const { length: length  } = styles;
    // If there are no styles, skip unnecessary work
    if (length === 0) {
        // Ensure prepareTemplateStyles is called to support adding
        // styles via `prepareAdoptedCssText` since that requires that
        // `prepareTemplateStyles` is called.
        //
        // ShadyCSS will only update styles containing @apply in the template
        // given to `prepareTemplateStyles`. If no lit Template was given,
        // ShadyCSS will not be able to update uses of @apply in any relevant
        // template. However, this is not a problem because we only create the
        // template for the purpose of supporting `prepareAdoptedCssText`,
        // which doesn't support @apply at all.
        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
        return;
    }
    const condensedStyle = document.createElement('style');
    // Collect styles into a single style. This helps us make sure ShadyCSS
    // manipulations will not prevent us from being able to fix up template
    // part indices.
    // NOTE: collecting styles is inefficient for browsers but ShadyCSS
    // currently does this anyway. When it does not, this should be changed.
    for(let i = 0; i < length; i++){
        const style = styles[i];
        style.parentNode.removeChild(style);
        condensedStyle.textContent += style.textContent;
    }
    // Remove styles from nested templates in this scope.
    $e15bf833f41fdbd47bc5145e4c0f5a2e$var$removeStylesFromLitTemplates(scopeName);
    // And then put the condensed style into the "root" template passed in as
    // `template`.
    const content = templateElement.content;
    if (!!template) $e15bf833f41fdbd47bc5145e4c0f5a2e$import$8be20fd875ffd458$8e9dc9428f64690e(template, condensedStyle, content.firstChild);
    else content.insertBefore(condensedStyle, content.firstChild);
    // Note, it's important that ShadyCSS gets the template that `lit-html`
    // will actually render so that it can update the style inside when
    // needed (e.g. @apply native Shadow DOM case).
    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
    const style = content.querySelector('style');
    if (window.ShadyCSS.nativeShadow && style !== null) // When in native Shadow DOM, ensure the style created by ShadyCSS is
    // included in initially rendered output (`renderedDOM`).
    renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
    else if (!!template) {
        // When no style is left in the template, parts will be broken as a
        // result. To fix this, we put back the style node ShadyCSS removed
        // and then tell lit to remove that node from the template.
        // There can be no style in the template in 2 cases (1) when Shady DOM
        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM
        // is in use ShadyCSS removes the style if it contains no content.
        // NOTE, ShadyCSS creates its own style so we can safely add/remove
        // `condensedStyle` here.
        content.insertBefore(condensedStyle, content.firstChild);
        const removes = new Set();
        removes.add(condensedStyle);
        $e15bf833f41fdbd47bc5145e4c0f5a2e$import$8be20fd875ffd458$eaae5a7f23c7face(template, removes);
    }
};
const $e15bf833f41fdbd47bc5145e4c0f5a2e$export$792a797b69be0d58 = (result, container, options)=>{
    if (!options || typeof options !== 'object' || !options.scopeName) throw new Error('The `scopeName` option is required.');
    const scopeName = options.scopeName;
    const hasRendered = $e15bf833f41fdbd47bc5145e4c0f5a2e$import$860a656180203239$478822027641b13a.has(container);
    const needsScoping = $e15bf833f41fdbd47bc5145e4c0f5a2e$var$compatibleShadyCSSVersion && container.nodeType === 11 && !!container.host;
    // Handle first render to a scope specially...
    const firstScopeRender = needsScoping && !$e15bf833f41fdbd47bc5145e4c0f5a2e$var$shadyRenderSet.has(scopeName);
    // On first scope render, render into a fragment; this cannot be a single
    // fragment that is reused since nested renders can occur synchronously.
    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
    $e15bf833f41fdbd47bc5145e4c0f5a2e$import$860a656180203239$792a797b69be0d58(result, renderContainer, Object.assign({
        templateFactory: $e15bf833f41fdbd47bc5145e4c0f5a2e$export$cf848885ac57356f(scopeName)
    }, options));
    // When performing first scope render,
    // (1) We've rendered into a fragment so that there's a chance to
    // `prepareTemplateStyles` before sub-elements hit the DOM
    // (which might cause them to render based on a common pattern of
    // rendering in a custom element's `connectedCallback`);
    // (2) Scope the template with ShadyCSS one time only for this scope.
    // (3) Render the fragment into the container and make sure the
    // container knows its `part` is the one we just rendered. This ensures
    // DOM will be re-used on subsequent renders.
    if (firstScopeRender) {
        const part = $e15bf833f41fdbd47bc5145e4c0f5a2e$import$860a656180203239$478822027641b13a.get(renderContainer);
        $e15bf833f41fdbd47bc5145e4c0f5a2e$import$860a656180203239$478822027641b13a.delete(renderContainer);
        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)
        // that should apply to `renderContainer` even if the rendered value is
        // not a TemplateInstance. However, it will only insert scoped styles
        // into the document if `prepareTemplateStyles` has already been called
        // for the given scope name.
        const template = part.value instanceof $e15bf833f41fdbd47bc5145e4c0f5a2e$import$131cb3110d6ff703$af8d7ebf78b1ba4c ? part.value.template : undefined;
        $e15bf833f41fdbd47bc5145e4c0f5a2e$var$prepareTemplateStyles(scopeName, renderContainer, template);
        $e15bf833f41fdbd47bc5145e4c0f5a2e$import$aaff0e6c17f2d126$87ad59dd8be5dd12(container, container.firstChild);
        container.appendChild(renderContainer);
        $e15bf833f41fdbd47bc5145e4c0f5a2e$import$860a656180203239$478822027641b13a.set(container, part);
    }
    // After elements have hit the DOM, update styling if this is the
    // initial render to this container.
    // This is needed whenever dynamic changes are made so it would be
    // safest to do every render; however, this would regress performance
    // so we leave it up to the user to call `ShadyCSS.styleElement`
    // for dynamic changes.
    if (!hasRendered && needsScoping) window.ShadyCSS.styleElement(container.host);
};
